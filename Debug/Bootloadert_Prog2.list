
Bootloadert_Prog2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001e3c  08001e3c  00011e3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001efc  08001efc  00011efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08001f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000000b8  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000128  20000128  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00007fb3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001910  00000000  00000000  00028053  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000276a  00000000  00000000  00029963  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f0  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002ee6  00000000  00000000  0002cd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000027c4  00000000  00000000  0002fc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00032422  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001220  00000000  00000000  000324a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001e24 	.word	0x08001e24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08001e24 	.word	0x08001e24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f888 	bl	80006bc <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f84a 	bl	8000654 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f81b 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f000 feb6 	bl	8001370 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000098 	.word	0x20000098
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098

08000630 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000632:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	0200      	lsls	r0, r0, #8
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800064a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800064c:	60d3      	str	r3, [r2, #12]
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	68dc      	ldr	r4, [r3, #12]
 800065a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	2b04      	cmp	r3, #4
 8000666:	bf28      	it	cs
 8000668:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 0501 	mov.w	r5, #1
 8000670:	fa05 f303 	lsl.w	r3, r5, r3
 8000674:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000678:	bf8c      	ite	hi
 800067a:	3c03      	subhi	r4, #3
 800067c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067e:	4019      	ands	r1, r3
 8000680:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000682:	fa05 f404 	lsl.w	r4, r5, r4
 8000686:	3c01      	subs	r4, #1
 8000688:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800068a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	ea42 0201 	orr.w	r2, r2, r1
 8000690:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	bfad      	iteet	ge
 8000696:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	f000 000f 	andlt.w	r0, r0, #15
 800069e:	4b06      	ldrlt	r3, [pc, #24]	; (80006b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfb5      	itete	lt
 80006a6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000ed14 	.word	0xe000ed14

080006bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	3801      	subs	r0, #1
 80006be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c2:	d20a      	bcs.n	80006da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	21f0      	movs	r1, #240	; 0xf0
 80006cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80006e8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80006ea:	4604      	mov	r4, r0
 80006ec:	b160      	cbz	r0, 8000708 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80006ee:	7943      	ldrb	r3, [r0, #5]
 80006f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006f4:	b913      	cbnz	r3, 80006fc <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80006f6:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80006f8:	f000 fe56 	bl	80013a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80006fc:	2302      	movs	r3, #2
 80006fe:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000700:	2301      	movs	r3, #1
 8000702:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000704:	2000      	movs	r0, #0
 8000706:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000708:	2001      	movs	r0, #1
}
 800070a:	bd10      	pop	{r4, pc}

0800070c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000710:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000712:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000714:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008c4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000718:	4a68      	ldr	r2, [pc, #416]	; (80008bc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008c8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000720:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000722:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000728:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000730:	45b6      	cmp	lr, r6
 8000732:	f040 80ae 	bne.w	8000892 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000736:	684c      	ldr	r4, [r1, #4]
 8000738:	f024 0710 	bic.w	r7, r4, #16
 800073c:	2f02      	cmp	r7, #2
 800073e:	d116      	bne.n	800076e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000740:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000744:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000748:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800074c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000750:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000754:	f04f 0c0f 	mov.w	ip, #15
 8000758:	fa0c fc0b 	lsl.w	ip, ip, fp
 800075c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000760:	690d      	ldr	r5, [r1, #16]
 8000762:	fa05 f50b 	lsl.w	r5, r5, fp
 8000766:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800076a:	f8ca 5020 	str.w	r5, [sl, #32]
 800076e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000772:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000774:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000778:	fa05 f50a 	lsl.w	r5, r5, sl
 800077c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800077e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000782:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000786:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800078a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800078c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000790:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000792:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000796:	d811      	bhi.n	80007bc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000798:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800079a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079e:	68cf      	ldr	r7, [r1, #12]
 80007a0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007a4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007b4:	409f      	lsls	r7, r3
 80007b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007c0:	688f      	ldr	r7, [r1, #8]
 80007c2:	fa07 f70a 	lsl.w	r7, r7, sl
 80007c6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007c8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ca:	00e5      	lsls	r5, r4, #3
 80007cc:	d561      	bpl.n	8000892 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	f04f 0b00 	mov.w	fp, #0
 80007d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80007d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007da:	4d39      	ldr	r5, [pc, #228]	; (80008c0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007e0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007e8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007ec:	9703      	str	r7, [sp, #12]
 80007ee:	9f03      	ldr	r7, [sp, #12]
 80007f0:	f023 0703 	bic.w	r7, r3, #3
 80007f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007f8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007fc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000800:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000804:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000808:	f04f 0e0f 	mov.w	lr, #15
 800080c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000810:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000812:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000816:	d043      	beq.n	80008a0 <HAL_GPIO_Init+0x194>
 8000818:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800081c:	42a8      	cmp	r0, r5
 800081e:	d041      	beq.n	80008a4 <HAL_GPIO_Init+0x198>
 8000820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000824:	42a8      	cmp	r0, r5
 8000826:	d03f      	beq.n	80008a8 <HAL_GPIO_Init+0x19c>
 8000828:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800082c:	42a8      	cmp	r0, r5
 800082e:	d03d      	beq.n	80008ac <HAL_GPIO_Init+0x1a0>
 8000830:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000834:	42a8      	cmp	r0, r5
 8000836:	d03b      	beq.n	80008b0 <HAL_GPIO_Init+0x1a4>
 8000838:	4548      	cmp	r0, r9
 800083a:	d03b      	beq.n	80008b4 <HAL_GPIO_Init+0x1a8>
 800083c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000840:	42a8      	cmp	r0, r5
 8000842:	d039      	beq.n	80008b8 <HAL_GPIO_Init+0x1ac>
 8000844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000848:	42a8      	cmp	r0, r5
 800084a:	bf14      	ite	ne
 800084c:	2508      	movne	r5, #8
 800084e:	2507      	moveq	r5, #7
 8000850:	fa05 f50c 	lsl.w	r5, r5, ip
 8000854:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000858:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800085a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800085c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf0c      	ite	eq
 8000864:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000866:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000868:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800086a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800086c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000874:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000876:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000878:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800087a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800087e:	bf0c      	ite	eq
 8000880:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000882:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000884:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000886:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000888:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800088a:	bf54      	ite	pl
 800088c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800088e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000890:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000892:	3301      	adds	r3, #1
 8000894:	2b10      	cmp	r3, #16
 8000896:	f47f af44 	bne.w	8000722 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800089a:	b005      	add	sp, #20
 800089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a0:	465d      	mov	r5, fp
 80008a2:	e7d5      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008a4:	2501      	movs	r5, #1
 80008a6:	e7d3      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008a8:	2502      	movs	r5, #2
 80008aa:	e7d1      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008ac:	2503      	movs	r5, #3
 80008ae:	e7cf      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b0:	2504      	movs	r5, #4
 80008b2:	e7cd      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b4:	2505      	movs	r5, #5
 80008b6:	e7cb      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b8:	2506      	movs	r5, #6
 80008ba:	e7c9      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008bc:	40013c00 	.word	0x40013c00
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021400 	.word	0x40021400

080008cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008cc:	6903      	ldr	r3, [r0, #16]
 80008ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008d0:	bf14      	ite	ne
 80008d2:	2001      	movne	r0, #1
 80008d4:	2000      	moveq	r0, #0
 80008d6:	4770      	bx	lr

080008d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d8:	b10a      	cbz	r2, 80008de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008da:	6181      	str	r1, [r0, #24]
 80008dc:	4770      	bx	lr
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	e7fb      	b.n	80008da <HAL_GPIO_WritePin+0x2>

080008e2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80008e2:	6943      	ldr	r3, [r0, #20]
 80008e4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80008e8:	bf08      	it	eq
 80008ea:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80008ec:	6181      	str	r1, [r0, #24]
 80008ee:	4770      	bx	lr

080008f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f4:	4604      	mov	r4, r0
 80008f6:	b918      	cbnz	r0, 8000900 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008f8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008fa:	b002      	add	sp, #8
 80008fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000900:	6803      	ldr	r3, [r0, #0]
 8000902:	07dd      	lsls	r5, r3, #31
 8000904:	d410      	bmi.n	8000928 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	0798      	lsls	r0, r3, #30
 800090a:	d458      	bmi.n	80009be <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	071a      	lsls	r2, r3, #28
 8000910:	f100 809a 	bmi.w	8000a48 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	f100 80b8 	bmi.w	8000a8c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800091c:	69a2      	ldr	r2, [r4, #24]
 800091e:	2a00      	cmp	r2, #0
 8000920:	f040 8119 	bne.w	8000b56 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000924:	2000      	movs	r0, #0
 8000926:	e7e8      	b.n	80008fa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000928:	4ba6      	ldr	r3, [pc, #664]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	f002 020c 	and.w	r2, r2, #12
 8000930:	2a04      	cmp	r2, #4
 8000932:	d007      	beq.n	8000944 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800093a:	2a08      	cmp	r2, #8
 800093c:	d10a      	bne.n	8000954 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	0259      	lsls	r1, r3, #9
 8000942:	d507      	bpl.n	8000954 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000944:	4b9f      	ldr	r3, [pc, #636]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	039a      	lsls	r2, r3, #14
 800094a:	d5dc      	bpl.n	8000906 <HAL_RCC_OscConfig+0x16>
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1d9      	bne.n	8000906 <HAL_RCC_OscConfig+0x16>
 8000952:	e7d1      	b.n	80008f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	4d9b      	ldr	r5, [pc, #620]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800095c:	d111      	bne.n	8000982 <HAL_RCC_OscConfig+0x92>
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000964:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000966:	f7ff fe5d 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	4d96      	ldr	r5, [pc, #600]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800096c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096e:	682b      	ldr	r3, [r5, #0]
 8000970:	039b      	lsls	r3, r3, #14
 8000972:	d4c8      	bmi.n	8000906 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000974:	f7ff fe56 	bl	8000624 <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2864      	cmp	r0, #100	; 0x64
 800097c:	d9f7      	bls.n	800096e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800097e:	2003      	movs	r0, #3
 8000980:	e7bb      	b.n	80008fa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000986:	d104      	bne.n	8000992 <HAL_RCC_OscConfig+0xa2>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098e:	602b      	str	r3, [r5, #0]
 8000990:	e7e5      	b.n	800095e <HAL_RCC_OscConfig+0x6e>
 8000992:	682a      	ldr	r2, [r5, #0]
 8000994:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000998:	602a      	str	r2, [r5, #0]
 800099a:	682a      	ldr	r2, [r5, #0]
 800099c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009a0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1df      	bne.n	8000966 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009a6:	f7ff fe3d 	bl	8000624 <HAL_GetTick>
 80009aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	039f      	lsls	r7, r3, #14
 80009b0:	d5a9      	bpl.n	8000906 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b2:	f7ff fe37 	bl	8000624 <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2864      	cmp	r0, #100	; 0x64
 80009ba:	d9f7      	bls.n	80009ac <HAL_RCC_OscConfig+0xbc>
 80009bc:	e7df      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009be:	4b81      	ldr	r3, [pc, #516]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f012 0f0c 	tst.w	r2, #12
 80009c6:	d007      	beq.n	80009d8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ce:	2a08      	cmp	r2, #8
 80009d0:	d111      	bne.n	80009f6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	025e      	lsls	r6, r3, #9
 80009d6:	d40e      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	4b7a      	ldr	r3, [pc, #488]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0795      	lsls	r5, r2, #30
 80009de:	d502      	bpl.n	80009e6 <HAL_RCC_OscConfig+0xf6>
 80009e0:	68e2      	ldr	r2, [r4, #12]
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d188      	bne.n	80008f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	6921      	ldr	r1, [r4, #16]
 80009ea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f4:	e78a      	b.n	800090c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009f6:	68e2      	ldr	r2, [r4, #12]
 80009f8:	4b73      	ldr	r3, [pc, #460]	; (8000bc8 <HAL_RCC_OscConfig+0x2d8>)
 80009fa:	b1b2      	cbz	r2, 8000a2a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fe10 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a04:	4d6f      	ldr	r5, [pc, #444]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	0798      	lsls	r0, r3, #30
 8000a0c:	d507      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0e:	682b      	ldr	r3, [r5, #0]
 8000a10:	6922      	ldr	r2, [r4, #16]
 8000a12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a1a:	602b      	str	r3, [r5, #0]
 8000a1c:	e776      	b.n	800090c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1e:	f7ff fe01 	bl	8000624 <HAL_GetTick>
 8000a22:	1b80      	subs	r0, r0, r6
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d9ef      	bls.n	8000a08 <HAL_RCC_OscConfig+0x118>
 8000a28:	e7a9      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fdfa 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a30:	4d64      	ldr	r5, [pc, #400]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	0799      	lsls	r1, r3, #30
 8000a38:	f57f af68 	bpl.w	800090c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fdf2 	bl	8000624 <HAL_GetTick>
 8000a40:	1b80      	subs	r0, r0, r6
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9f6      	bls.n	8000a34 <HAL_RCC_OscConfig+0x144>
 8000a46:	e79a      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a48:	6962      	ldr	r2, [r4, #20]
 8000a4a:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <HAL_RCC_OscConfig+0x2dc>)
 8000a4c:	b17a      	cbz	r2, 8000a6e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a52:	f7ff fde7 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a56:	4d5b      	ldr	r5, [pc, #364]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5c:	079f      	lsls	r7, r3, #30
 8000a5e:	f53f af59 	bmi.w	8000914 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a62:	f7ff fddf 	bl	8000624 <HAL_GetTick>
 8000a66:	1b80      	subs	r0, r0, r6
 8000a68:	2802      	cmp	r0, #2
 8000a6a:	d9f6      	bls.n	8000a5a <HAL_RCC_OscConfig+0x16a>
 8000a6c:	e787      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a70:	f7ff fdd8 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a74:	4d53      	ldr	r5, [pc, #332]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	f57f af4a 	bpl.w	8000914 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a80:	f7ff fdd0 	bl	8000624 <HAL_GetTick>
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9f6      	bls.n	8000a78 <HAL_RCC_OscConfig+0x188>
 8000a8a:	e778      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a8c:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a94:	d128      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	9201      	str	r2, [sp, #4]
 8000a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aaa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aac:	4d48      	ldr	r5, [pc, #288]	; (8000bd0 <HAL_RCC_OscConfig+0x2e0>)
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	05d9      	lsls	r1, r3, #23
 8000ab2:	d51b      	bpl.n	8000aec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	68a3      	ldr	r3, [r4, #8]
 8000ab6:	4d43      	ldr	r5, [pc, #268]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d127      	bne.n	8000b0c <HAL_RCC_OscConfig+0x21c>
 8000abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ac4:	f7ff fdae 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac8:	4d3e      	ldr	r5, [pc, #248]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000acc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ad2:	079b      	lsls	r3, r3, #30
 8000ad4:	d539      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f43f af20 	beq.w	800091c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000adc:	4a39      	ldr	r2, [pc, #228]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000ade:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	e719      	b.n	800091c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e7df      	b.n	8000aac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000af4:	f7ff fd96 	bl	8000624 <HAL_GetTick>
 8000af8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	05da      	lsls	r2, r3, #23
 8000afe:	d4d9      	bmi.n	8000ab4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b00:	f7ff fd90 	bl	8000624 <HAL_GetTick>
 8000b04:	1bc0      	subs	r0, r0, r7
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9f7      	bls.n	8000afa <HAL_RCC_OscConfig+0x20a>
 8000b0a:	e738      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d104      	bne.n	8000b1a <HAL_RCC_OscConfig+0x22a>
 8000b10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	672b      	str	r3, [r5, #112]	; 0x70
 8000b18:	e7d0      	b.n	8000abc <HAL_RCC_OscConfig+0x1cc>
 8000b1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b1c:	f022 0201 	bic.w	r2, r2, #1
 8000b20:	672a      	str	r2, [r5, #112]	; 0x70
 8000b22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b24:	f022 0204 	bic.w	r2, r2, #4
 8000b28:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1ca      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b2e:	f7ff fd79 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b3a:	0798      	lsls	r0, r3, #30
 8000b3c:	d5cb      	bpl.n	8000ad6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fd71 	bl	8000624 <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	4540      	cmp	r0, r8
 8000b46:	d9f7      	bls.n	8000b38 <HAL_RCC_OscConfig+0x248>
 8000b48:	e719      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fd6b 	bl	8000624 <HAL_GetTick>
 8000b4e:	1bc0      	subs	r0, r0, r7
 8000b50:	4540      	cmp	r0, r8
 8000b52:	d9bd      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x1e0>
 8000b54:	e713      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b56:	4d1b      	ldr	r5, [pc, #108]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000b58:	68ab      	ldr	r3, [r5, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	f43f aeca 	beq.w	80008f8 <HAL_RCC_OscConfig+0x8>
 8000b64:	4e1b      	ldr	r6, [pc, #108]	; (8000bd4 <HAL_RCC_OscConfig+0x2e4>)
 8000b66:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b68:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b6a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b6c:	d134      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fd59 	bl	8000624 <HAL_GetTick>
 8000b72:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	0199      	lsls	r1, r3, #6
 8000b78:	d41e      	bmi.n	8000bb8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b7a:	6a22      	ldr	r2, [r4, #32]
 8000b7c:	69e3      	ldr	r3, [r4, #28]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b8e:	4c0d      	ldr	r4, [pc, #52]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b90:	0852      	lsrs	r2, r2, #1
 8000b92:	3a01      	subs	r2, #1
 8000b94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b98:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fd41 	bl	8000624 <HAL_GetTick>
 8000ba2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	019a      	lsls	r2, r3, #6
 8000ba8:	f53f aebc 	bmi.w	8000924 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bac:	f7ff fd3a 	bl	8000624 <HAL_GetTick>
 8000bb0:	1b40      	subs	r0, r0, r5
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f6      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x2b4>
 8000bb6:	e6e2      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb8:	f7ff fd34 	bl	8000624 <HAL_GetTick>
 8000bbc:	1bc0      	subs	r0, r0, r7
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d9d8      	bls.n	8000b74 <HAL_RCC_OscConfig+0x284>
 8000bc2:	e6dc      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	42470000 	.word	0x42470000
 8000bcc:	42470e80 	.word	0x42470e80
 8000bd0:	40007000 	.word	0x40007000
 8000bd4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fd24 	bl	8000624 <HAL_GetTick>
 8000bdc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	f57f ae9f 	bpl.w	8000924 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be6:	f7ff fd1d 	bl	8000624 <HAL_GetTick>
 8000bea:	1b00      	subs	r0, r0, r4
 8000bec:	2802      	cmp	r0, #2
 8000bee:	d9f6      	bls.n	8000bde <HAL_RCC_OscConfig+0x2ee>
 8000bf0:	e6c5      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
 8000bf2:	bf00      	nop

08000bf4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf4:	4913      	ldr	r1, [pc, #76]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bf6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf8:	688b      	ldr	r3, [r1, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d003      	beq.n	8000c0a <HAL_RCC_GetSysClockFreq+0x16>
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d003      	beq.n	8000c0e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x58>)
 8000c0c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c10:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c12:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c14:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c18:	bf14      	ite	ne
 8000c1a:	480c      	ldrne	r0, [pc, #48]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1c:	480a      	ldreq	r0, [pc, #40]	; (8000c48 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c22:	bf18      	it	ne
 8000c24:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c2a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c2e:	f7ff fb27 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c42:	bd08      	pop	{r3, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	00f42400 	.word	0x00f42400
 8000c4c:	007a1200 	.word	0x007a1200

08000c50 <HAL_RCC_ClockConfig>:
{
 8000c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c54:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c56:	4604      	mov	r4, r0
 8000c58:	b910      	cbnz	r0, 8000c60 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c60:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <HAL_RCC_ClockConfig+0x124>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	f002 020f 	and.w	r2, r2, #15
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d328      	bcc.n	8000cbe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c6c:	6821      	ldr	r1, [r4, #0]
 8000c6e:	078f      	lsls	r7, r1, #30
 8000c70:	d42d      	bmi.n	8000cce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c72:	07c8      	lsls	r0, r1, #31
 8000c74:	d440      	bmi.n	8000cf8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <HAL_RCC_ClockConfig+0x124>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	f002 020f 	and.w	r2, r2, #15
 8000c7e:	4295      	cmp	r5, r2
 8000c80:	d366      	bcc.n	8000d50 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c82:	6822      	ldr	r2, [r4, #0]
 8000c84:	0751      	lsls	r1, r2, #29
 8000c86:	d46c      	bmi.n	8000d62 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c88:	0713      	lsls	r3, r2, #28
 8000c8a:	d507      	bpl.n	8000c9c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c8c:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000c8e:	6921      	ldr	r1, [r4, #16]
 8000c90:	6893      	ldr	r3, [r2, #8]
 8000c92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c9c:	f7ff ffaa 	bl	8000bf4 <HAL_RCC_GetSysClockFreq>
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000ca2:	4a36      	ldr	r2, [pc, #216]	; (8000d7c <HAL_RCC_ClockConfig+0x12c>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	40d8      	lsrs	r0, r3
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <HAL_RCC_ClockConfig+0x130>)
 8000cb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fc6c 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d1c6      	bne.n	8000c5a <HAL_RCC_ClockConfig+0xa>
 8000ccc:	e7ce      	b.n	8000c6c <HAL_RCC_ClockConfig+0x1c>
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	689a      	ldrne	r2, [r3, #8]
 8000cd8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cdc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cde:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce0:	bf42      	ittt	mi
 8000ce2:	689a      	ldrmi	r2, [r3, #8]
 8000ce4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ce8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	68a0      	ldr	r0, [r4, #8]
 8000cee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cf2:	4302      	orrs	r2, r0
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	e7bc      	b.n	8000c72 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf8:	6862      	ldr	r2, [r4, #4]
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d11d      	bne.n	8000d3c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d06:	d0a8      	beq.n	8000c5a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d08:	4e1b      	ldr	r6, [pc, #108]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000d0a:	68b3      	ldr	r3, [r6, #8]
 8000d0c:	f023 0303 	bic.w	r3, r3, #3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d14:	f7ff fc86 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d18:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d1c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1e:	68b3      	ldr	r3, [r6, #8]
 8000d20:	6862      	ldr	r2, [r4, #4]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d2a:	d0a4      	beq.n	8000c76 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d2c:	f7ff fc7a 	bl	8000624 <HAL_GetTick>
 8000d30:	1bc0      	subs	r0, r0, r7
 8000d32:	4540      	cmp	r0, r8
 8000d34:	d9f3      	bls.n	8000d1e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d36:	2003      	movs	r0, #3
}
 8000d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d3c:	1e91      	subs	r1, r2, #2
 8000d3e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d40:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d42:	d802      	bhi.n	8000d4a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d48:	e7dd      	b.n	8000d06 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4a:	f013 0f02 	tst.w	r3, #2
 8000d4e:	e7da      	b.n	8000d06 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d50:	b2ea      	uxtb	r2, r5
 8000d52:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	429d      	cmp	r5, r3
 8000d5c:	f47f af7d 	bne.w	8000c5a <HAL_RCC_ClockConfig+0xa>
 8000d60:	e78f      	b.n	8000c82 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000d64:	68e0      	ldr	r0, [r4, #12]
 8000d66:	688b      	ldr	r3, [r1, #8]
 8000d68:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	608b      	str	r3, [r1, #8]
 8000d70:	e78a      	b.n	8000c88 <HAL_RCC_ClockConfig+0x38>
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	08001ea9 	.word	0x08001ea9
 8000d80:	20000008 	.word	0x20000008

08000d84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d92:	6810      	ldr	r0, [r2, #0]
}
 8000d94:	40d8      	lsrs	r0, r3
 8000d96:	4770      	bx	lr
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	08001eb9 	.word	0x08001eb9
 8000da0:	20000008 	.word	0x20000008

08000da4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000db2:	6810      	ldr	r0, [r2, #0]
}
 8000db4:	40d8      	lsrs	r0, r3
 8000db6:	4770      	bx	lr
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	08001eb9 	.word	0x08001eb9
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dc8:	6806      	ldr	r6, [r0, #0]
 8000dca:	68c2      	ldr	r2, [r0, #12]
 8000dcc:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dce:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6133      	str	r3, [r6, #16]
{
 8000dd8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dda:	6883      	ldr	r3, [r0, #8]
 8000ddc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000dde:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000de0:	4303      	orrs	r3, r0
 8000de2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000de4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000de8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000dea:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dee:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8000df0:	4313      	orrs	r3, r2
 8000df2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000df4:	6973      	ldr	r3, [r6, #20]
 8000df6:	69a2      	ldr	r2, [r4, #24]
 8000df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dfc:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dfe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e02:	6173      	str	r3, [r6, #20]
 8000e04:	4b7a      	ldr	r3, [pc, #488]	; (8000ff0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e06:	d17c      	bne.n	8000f02 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d003      	beq.n	8000e14 <UART_SetConfig+0x50>
 8000e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e10:	429e      	cmp	r6, r3
 8000e12:	d144      	bne.n	8000e9e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e14:	f7ff ffc6 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000e18:	2519      	movs	r5, #25
 8000e1a:	fb05 f300 	mul.w	r3, r5, r0
 8000e1e:	6860      	ldr	r0, [r4, #4]
 8000e20:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e24:	0040      	lsls	r0, r0, #1
 8000e26:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e32:	f7ff ffb7 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000e36:	6863      	ldr	r3, [r4, #4]
 8000e38:	4368      	muls	r0, r5
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e40:	f7ff ffb0 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000e44:	6863      	ldr	r3, [r4, #4]
 8000e46:	4368      	muls	r0, r5
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e52:	fb09 7313 	mls	r3, r9, r3, r7
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	3332      	adds	r3, #50	; 0x32
 8000e5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000e64:	f7ff ff9e 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000e68:	6862      	ldr	r2, [r4, #4]
 8000e6a:	4368      	muls	r0, r5
 8000e6c:	0052      	lsls	r2, r2, #1
 8000e6e:	fbb0 faf2 	udiv	sl, r0, r2
 8000e72:	f7ff ff97 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	4368      	muls	r0, r5
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e80:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e84:	fb09 a313 	mls	r3, r9, r3, sl
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	3332      	adds	r3, #50	; 0x32
 8000e8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e96:	443b      	add	r3, r7
 8000e98:	60b3      	str	r3, [r6, #8]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e9e:	f7ff ff71 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000ea2:	2519      	movs	r5, #25
 8000ea4:	fb05 f300 	mul.w	r3, r5, r0
 8000ea8:	6860      	ldr	r0, [r4, #4]
 8000eaa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000eae:	0040      	lsls	r0, r0, #1
 8000eb0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000eb4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000eb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000ebc:	f7ff ff62 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000ec0:	6863      	ldr	r3, [r4, #4]
 8000ec2:	4368      	muls	r0, r5
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000eca:	f7ff ff5b 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000ece:	6863      	ldr	r3, [r4, #4]
 8000ed0:	4368      	muls	r0, r5
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000edc:	fb09 7313 	mls	r3, r9, r3, r7
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	3332      	adds	r3, #50	; 0x32
 8000ee4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000eee:	f7ff ff49 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000ef2:	6862      	ldr	r2, [r4, #4]
 8000ef4:	4368      	muls	r0, r5
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	fbb0 faf2 	udiv	sl, r0, r2
 8000efc:	f7ff ff42 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000f00:	e7b9      	b.n	8000e76 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f02:	429e      	cmp	r6, r3
 8000f04:	d002      	beq.n	8000f0c <UART_SetConfig+0x148>
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <UART_SetConfig+0x230>)
 8000f08:	429e      	cmp	r6, r3
 8000f0a:	d140      	bne.n	8000f8e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f0c:	f7ff ff4a 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000f10:	6867      	ldr	r7, [r4, #4]
 8000f12:	2519      	movs	r5, #25
 8000f14:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f18:	fb05 f300 	mul.w	r3, r5, r0
 8000f1c:	00bf      	lsls	r7, r7, #2
 8000f1e:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f22:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f26:	011f      	lsls	r7, r3, #4
 8000f28:	f7ff ff3c 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000f2c:	6863      	ldr	r3, [r4, #4]
 8000f2e:	4368      	muls	r0, r5
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fbb0 f8f3 	udiv	r8, r0, r3
 8000f36:	f7ff ff35 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000f3a:	6863      	ldr	r3, [r4, #4]
 8000f3c:	4368      	muls	r0, r5
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f44:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f48:	fb09 8313 	mls	r3, r9, r3, r8
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	3332      	adds	r3, #50	; 0x32
 8000f50:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f54:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000f58:	f7ff ff24 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8000f5c:	6862      	ldr	r2, [r4, #4]
 8000f5e:	4368      	muls	r0, r5
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	fbb0 faf2 	udiv	sl, r0, r2
 8000f66:	f7ff ff1d 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f6a:	6863      	ldr	r3, [r4, #4]
 8000f6c:	4368      	muls	r0, r5
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f74:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f78:	fb09 a313 	mls	r3, r9, r3, sl
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	3332      	adds	r3, #50	; 0x32
 8000f80:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	ea43 0308 	orr.w	r3, r3, r8
 8000f8c:	e783      	b.n	8000e96 <UART_SetConfig+0xd2>
 8000f8e:	f7ff fef9 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000f92:	6867      	ldr	r7, [r4, #4]
 8000f94:	2519      	movs	r5, #25
 8000f96:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f9a:	fb05 f300 	mul.w	r3, r5, r0
 8000f9e:	00bf      	lsls	r7, r7, #2
 8000fa0:	fbb3 f3f7 	udiv	r3, r3, r7
 8000fa4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fa8:	011f      	lsls	r7, r3, #4
 8000faa:	f7ff feeb 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000fae:	6863      	ldr	r3, [r4, #4]
 8000fb0:	4368      	muls	r0, r5
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fbb0 f8f3 	udiv	r8, r0, r3
 8000fb8:	f7ff fee4 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000fbc:	6863      	ldr	r3, [r4, #4]
 8000fbe:	4368      	muls	r0, r5
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc6:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fca:	fb09 8313 	mls	r3, r9, r3, r8
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	3332      	adds	r3, #50	; 0x32
 8000fd2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fd6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000fda:	f7ff fed3 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000fde:	6862      	ldr	r2, [r4, #4]
 8000fe0:	4368      	muls	r0, r5
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	fbb0 faf2 	udiv	sl, r0, r2
 8000fe8:	f7ff fecc 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8000fec:	e7bd      	b.n	8000f6a <UART_SetConfig+0x1a6>
 8000fee:	bf00      	nop
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40011400 	.word	0x40011400

08000ff8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	460e      	mov	r6, r1
 8000ffe:	4617      	mov	r7, r2
 8001000:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001002:	6821      	ldr	r1, [r4, #0]
 8001004:	680b      	ldr	r3, [r1, #0]
 8001006:	ea36 0303 	bics.w	r3, r6, r3
 800100a:	d101      	bne.n	8001010 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800100c:	2000      	movs	r0, #0
}
 800100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001010:	1c6b      	adds	r3, r5, #1
 8001012:	d0f7      	beq.n	8001004 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001014:	b995      	cbnz	r5, 800103c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800101e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001028:	2320      	movs	r3, #32
 800102a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800102e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001032:	2300      	movs	r3, #0
 8001034:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001038:	2003      	movs	r0, #3
 800103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800103c:	f7ff faf2 	bl	8000624 <HAL_GetTick>
 8001040:	1bc0      	subs	r0, r0, r7
 8001042:	4285      	cmp	r5, r0
 8001044:	d2dd      	bcs.n	8001002 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001046:	e7e6      	b.n	8001016 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001048 <HAL_UART_Init>:
{
 8001048:	b510      	push	{r4, lr}
  if (huart == NULL)
 800104a:	4604      	mov	r4, r0
 800104c:	b340      	cbz	r0, 80010a0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800104e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001056:	b91b      	cbnz	r3, 8001060 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001058:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800105c:	f000 f9bc 	bl	80013d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001060:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001062:	2324      	movs	r3, #36	; 0x24
 8001064:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001068:	68d3      	ldr	r3, [r2, #12]
 800106a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800106e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001070:	4620      	mov	r0, r4
 8001072:	f7ff fea7 	bl	8000dc4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800107e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001086:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800108e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001090:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001092:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001094:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001096:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800109a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800109e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010a0:	2001      	movs	r0, #1
}
 80010a2:	bd10      	pop	{r4, pc}

080010a4 <HAL_UART_Transmit>:
{
 80010a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80010aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010ae:	2b20      	cmp	r3, #32
{
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80010b6:	d14f      	bne.n	8001158 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80010b8:	2900      	cmp	r1, #0
 80010ba:	d04a      	beq.n	8001152 <HAL_UART_Transmit+0xae>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d048      	beq.n	8001152 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80010c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d047      	beq.n	8001158 <HAL_UART_Transmit+0xb4>
 80010c8:	2301      	movs	r3, #1
 80010ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010d2:	2321      	movs	r3, #33	; 0x21
 80010d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80010d8:	f7ff faa4 	bl	8000624 <HAL_GetTick>
    huart->TxXferSize = Size;
 80010dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80010e0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80010e2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b96b      	cbnz	r3, 8001108 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4632      	mov	r2, r6
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff ff80 	bl	8000ff8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010f8:	b9b0      	cbnz	r0, 8001128 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80010fa:	2320      	movs	r3, #32
 80010fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001100:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001108:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800110a:	3b01      	subs	r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001110:	68a3      	ldr	r3, [r4, #8]
 8001112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001116:	4632      	mov	r2, r6
 8001118:	463b      	mov	r3, r7
 800111a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800111e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001120:	d10e      	bne.n	8001140 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001122:	f7ff ff69 	bl	8000ff8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001126:	b110      	cbz	r0, 800112e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001128:	2003      	movs	r0, #3
 800112a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800112e:	882b      	ldrh	r3, [r5, #0]
 8001130:	6822      	ldr	r2, [r4, #0]
 8001132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001136:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001138:	6923      	ldr	r3, [r4, #16]
 800113a:	b943      	cbnz	r3, 800114e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 800113c:	3502      	adds	r5, #2
 800113e:	e7d2      	b.n	80010e6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001140:	f7ff ff5a 	bl	8000ff8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001144:	2800      	cmp	r0, #0
 8001146:	d1ef      	bne.n	8001128 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	782a      	ldrb	r2, [r5, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	3501      	adds	r5, #1
 8001150:	e7c9      	b.n	80010e6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001152:	2001      	movs	r0, #1
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001158:	2002      	movs	r0, #2
}
 800115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001160 <Printmsg>:
  /* USER CODE END 3 */
}


void Printmsg(char *format,...)
{
 8001160:	b40f      	push	{r0, r1, r2, r3}
 8001162:	b500      	push	{lr}
 8001164:	b097      	sub	sp, #92	; 0x5c
 8001166:	aa18      	add	r2, sp, #96	; 0x60
	char str[80];
	va_list args;
	va_start(args, format);
	vsprintf(str,format,args);
 8001168:	a802      	add	r0, sp, #8
{
 800116a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, format);
 800116e:	9201      	str	r2, [sp, #4]
	vsprintf(str,format,args);
 8001170:	f000 fa54 	bl	800161c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001174:	a802      	add	r0, sp, #8
 8001176:	f7ff f82b 	bl	80001d0 <strlen>
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	b282      	uxth	r2, r0
 8001180:	a902      	add	r1, sp, #8
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <Printmsg+0x34>)
 8001184:	f7ff ff8e 	bl	80010a4 <HAL_UART_Transmit>
	va_end(args);
}
 8001188:	b017      	add	sp, #92	; 0x5c
 800118a:	f85d eb04 	ldr.w	lr, [sp], #4
 800118e:	b004      	add	sp, #16
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200000e4 	.word	0x200000e4

08001198 <bootloader_jump_to_user_app>:
/*code for jump to user application*/
void bootloader_jump_to_user_app(void)
{
	void (*app_reset_handler)(void);
	//Printmsg("BL_DEBUG_MSG: boot loader jump_to_user_app\r\n");
	uint32_t msp_value = *(volatile uint32_t *) FLASH_SECTOR2_BASE_ADDRESS;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <bootloader_jump_to_user_app+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800119c:	f383 8808 	msr	MSP, r3
	//Printmsg("BL_-DEBUG_MSG:msp_value:%#x\r\n",msp_value);
	__set_MSP(msp_value);
	/*Get the reset handler address of user app
	 * FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS+4);
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <bootloader_jump_to_user_app+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
	app_reset_handler = (void *) resethandler_address;
	//Printmsg("BL_-DEBUG_MSG:app_reset_handler address:%#x\r\n",app_reset_handler);
	app_reset_handler();
 80011a4:	4718      	bx	r3
 80011a6:	bf00      	nop
 80011a8:	08008000 	.word	0x08008000
 80011ac:	08008004 	.word	0x08008004

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b530      	push	{r4, r5, lr}
 80011b2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b4:	2230      	movs	r2, #48	; 0x30
 80011b6:	2100      	movs	r1, #0
 80011b8:	a808      	add	r0, sp, #32
 80011ba:	f000 fa0f 	bl	80015dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011be:	2100      	movs	r1, #0
 80011c0:	2214      	movs	r2, #20
 80011c2:	a803      	add	r0, sp, #12
 80011c4:	f000 fa0a 	bl	80015dc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2400      	movs	r4, #0
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <SystemClock_Config+0x8c>)
 80011cc:	9401      	str	r4, [sp, #4]
 80011ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <SystemClock_Config+0x90>)
 80011e2:	9402      	str	r4, [sp, #8]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ee:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f4:	9302      	str	r3, [sp, #8]
 80011f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	2301      	movs	r3, #1
 80011fa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2310      	movs	r3, #16
 80011fe:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001204:	2332      	movs	r3, #50	; 0x32
 8001206:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001208:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800120c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001210:	2307      	movs	r3, #7
 8001212:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001216:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f7ff fb6a 	bl	80008f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001220:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001224:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001226:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001232:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001234:	f7ff fd0c 	bl	8000c50 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001238:	b015      	add	sp, #84	; 0x54
 800123a:	bd30      	pop	{r4, r5, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <main>:
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001248:	f7ff f9c6 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 800124c:	f7ff ffb0 	bl	80011b0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	2214      	movs	r2, #20
 8001252:	2100      	movs	r1, #0
 8001254:	a803      	add	r0, sp, #12
 8001256:	f000 f9c1 	bl	80015dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2400      	movs	r4, #0
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <main+0x100>)
 800125e:	9400      	str	r4, [sp, #0]
 8001260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001262:	4839      	ldr	r0, [pc, #228]	; (8001348 <main+0x104>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	f042 0201 	orr.w	r2, r2, #1
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
 800126a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126c:	f002 0201 	and.w	r2, r2, #1
 8001270:	9200      	str	r2, [sp, #0]
 8001272:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	9401      	str	r4, [sp, #4]
 8001276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001278:	f042 0202 	orr.w	r2, r2, #2
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
 800127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001280:	f002 0202 	and.w	r2, r2, #2
 8001284:	9201      	str	r2, [sp, #4]
 8001286:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001288:	9402      	str	r4, [sp, #8]
 800128a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128c:	f042 0208 	orr.w	r2, r2, #8
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001298:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800129c:	f44f 4170 	mov.w	r1, #61440	; 0xf000

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012a4:	f7ff fb18 	bl	80008d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	a903      	add	r1, sp, #12
 80012aa:	4828      	ldr	r0, [pc, #160]	; (800134c <main+0x108>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ac:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ae:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f7ff fa2b 	bl	800070c <HAL_GPIO_Init>
  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012b8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	4822      	ldr	r0, [pc, #136]	; (8001348 <main+0x104>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012be:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f7ff fa21 	bl	800070c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80012ca:	4821      	ldr	r0, [pc, #132]	; (8001350 <main+0x10c>)
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <main+0x110>)
 80012ce:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012d0:	f7ff fa0a 	bl	80006e8 <HAL_CRC_Init>
  huart2.Instance = USART2;
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <main+0x114>)
  huart2.Init.BaudRate = 115200;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <main+0x118>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d8:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80012da:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012de:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 115200;
 80012e0:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e6:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e8:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ee:	f7ff feab 	bl	8001048 <HAL_UART_Init>
  huart3.Instance = USART3;
 80012f2:	481b      	ldr	r0, [pc, #108]	; (8001360 <main+0x11c>)
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <main+0x120>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80012f8:	e880 0088 	stmia.w	r0, {r3, r7}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012fc:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fe:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001300:	6146      	str	r6, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001306:	f7ff fe9f 	bl	8001048 <HAL_UART_Init>
  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET)
 800130a:	4629      	mov	r1, r5
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <main+0x108>)
 800130e:	f7ff fadd 	bl	80008cc <HAL_GPIO_ReadPin>
 8001312:	42a8      	cmp	r0, r5
 8001314:	d10a      	bne.n	800132c <main+0xe8>
 	  		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8001316:	480c      	ldr	r0, [pc, #48]	; (8001348 <main+0x104>)
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	f7ff fae1 	bl	80008e2 <HAL_GPIO_TogglePin>
 	  		  Printmsg("BL_DEBUG_MSG:BUTTON IS PRESSED..GOING TO BOOT MODE\r\n");
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <main+0x124>)
 8001322:	f7ff ff1d 	bl	8001160 <Printmsg>
}
 8001326:	2000      	movs	r0, #0
 8001328:	b009      	add	sp, #36	; 0x24
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 	  		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 800132c:	462a      	mov	r2, r5
 800132e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <main+0x104>)
 8001334:	f7ff fad0 	bl	80008d8 <HAL_GPIO_WritePin>
 	  		  Printmsg("BL_DEBUG_MSG:BUTTON IS NOT PRESSED..GOING TO USER APP\r\n");
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <main+0x128>)
 800133a:	f7ff ff11 	bl	8001160 <Printmsg>
 	  		  	 	  bootloader_jump_to_user_app();
 800133e:	f7ff ff2b 	bl	8001198 <bootloader_jump_to_user_app>
 8001342:	e7f0      	b.n	8001326 <main+0xe2>
 8001344:	40023800 	.word	0x40023800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40020000 	.word	0x40020000
 8001350:	200000dc 	.word	0x200000dc
 8001354:	40023000 	.word	0x40023000
 8001358:	200000e4 	.word	0x200000e4
 800135c:	40004400 	.word	0x40004400
 8001360:	2000009c 	.word	0x2000009c
 8001364:	40004800 	.word	0x40004800
 8001368:	08001e3c 	.word	0x08001e3c
 800136c:	08001e71 	.word	0x08001e71

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_MspInit+0x34>)
 8001374:	2100      	movs	r1, #0
 8001376:	9100      	str	r1, [sp, #0]
 8001378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800137a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800137e:	645a      	str	r2, [r3, #68]	; 0x44
 8001380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001382:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	9101      	str	r1, [sp, #4]
 800138c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	b002      	add	sp, #8
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013a8:	6802      	ldr	r2, [r0, #0]
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_CRC_MspInit+0x28>)
 80013ac:	429a      	cmp	r2, r3
{
 80013ae:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013b0:	d10b      	bne.n	80013ca <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_CRC_MspInit+0x2c>)
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013ca:	b002      	add	sp, #8
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023000 	.word	0x40023000
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	2214      	movs	r2, #20
{
 80013dc:	b08a      	sub	sp, #40	; 0x28
 80013de:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	2100      	movs	r1, #0
 80013e2:	eb0d 0002 	add.w	r0, sp, r2
 80013e6:	f000 f8f9 	bl	80015dc <memset>
  if(huart->Instance==USART2)
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_UART_MspInit+0xb4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d125      	bne.n	800143e <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	4827      	ldr	r0, [pc, #156]	; (8001494 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f6:	2100      	movs	r1, #0
 80013f8:	9101      	str	r1, [sp, #4]
 80013fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001408:	9201      	str	r2, [sp, #4]
 800140a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	9102      	str	r1, [sp, #8]
 800140e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001410:	f042 0201 	orr.w	r2, r2, #1
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001420:	230c      	movs	r3, #12
 8001422:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001428:	2301      	movs	r3, #1
 800142a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001430:	2307      	movs	r3, #7
 8001432:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f7ff f969 	bl	800070c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800143a:	b00a      	add	sp, #40	; 0x28
 800143c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <HAL_UART_MspInit+0xc0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d1fa      	bne.n	800143a <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001448:	2100      	movs	r1, #0
 800144a:	9103      	str	r1, [sp, #12]
 800144c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800144e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001452:	641a      	str	r2, [r3, #64]	; 0x40
 8001454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001456:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800145a:	9203      	str	r2, [sp, #12]
 800145c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	9104      	str	r1, [sp, #16]
 8001460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001462:	f042 0202 	orr.w	r2, r2, #2
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	9304      	str	r3, [sp, #16]
 8001470:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001476:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001484:	2307      	movs	r3, #7
 8001486:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	a905      	add	r1, sp, #20
 800148a:	e7d4      	b.n	8001436 <HAL_UART_MspInit+0x5e>
 800148c:	40004400 	.word	0x40004400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000
 8001498:	40004800 	.word	0x40004800
 800149c:	40020400 	.word	0x40020400

080014a0 <NMI_Handler>:
 80014a0:	4770      	bx	lr

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler>

080014aa <SVC_Handler>:
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f7ff b8ac 	b.w	800060c <HAL_IncTick>

080014b4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80014b4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <_sbrk+0x2c>)
 80014b8:	6819      	ldr	r1, [r3, #0]
{
 80014ba:	4602      	mov	r2, r0
	if (heap_end == 0)
 80014bc:	b909      	cbnz	r1, 80014c2 <_sbrk+0xe>
		heap_end = &end;
 80014be:	4909      	ldr	r1, [pc, #36]	; (80014e4 <_sbrk+0x30>)
 80014c0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80014c2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80014c4:	4669      	mov	r1, sp
 80014c6:	4402      	add	r2, r0
 80014c8:	428a      	cmp	r2, r1
 80014ca:	d906      	bls.n	80014da <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80014cc:	f000 f85c 	bl	8001588 <__errno>
 80014d0:	230c      	movs	r3, #12
 80014d2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80014da:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80014dc:	bd08      	pop	{r3, pc}
 80014de:	bf00      	nop
 80014e0:	2000008c 	.word	0x2000008c
 80014e4:	20000128 	.word	0x20000128

080014e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	490f      	ldr	r1, [pc, #60]	; (8001528 <SystemInit+0x40>)
 80014ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80014ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <SystemInit+0x44>)
 80014f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014fa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001502:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800150a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800150e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <SystemInit+0x48>)
 8001512:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800151a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800151c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800151e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001522:	608b      	str	r3, [r1, #8]
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00
 800152c:	40023800 	.word	0x40023800
 8001530:	24003010 	.word	0x24003010

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001538:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800153a:	e003      	b.n	8001544 <LoopCopyDataInit>

0800153c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800153e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001540:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001542:	3104      	adds	r1, #4

08001544 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001548:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800154a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800154c:	d3f6      	bcc.n	800153c <CopyDataInit>
  ldr  r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001550:	e002      	b.n	8001558 <LoopFillZerobss>

08001552 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001552:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001554:	f842 3b04 	str.w	r3, [r2], #4

08001558 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800155a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800155c:	d3f9      	bcc.n	8001552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800155e:	f7ff ffc3 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f000 f817 	bl	8001594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fe6d 	bl	8001244 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800156c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001570:	08001f04 	.word	0x08001f04
  ldr  r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001578:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800157c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001580:	20000128 	.word	0x20000128

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <__errno>:
 8001588:	4b01      	ldr	r3, [pc, #4]	; (8001590 <__errno+0x8>)
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2000000c 	.word	0x2000000c

08001594 <__libc_init_array>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	4e0d      	ldr	r6, [pc, #52]	; (80015cc <__libc_init_array+0x38>)
 8001598:	4c0d      	ldr	r4, [pc, #52]	; (80015d0 <__libc_init_array+0x3c>)
 800159a:	1ba4      	subs	r4, r4, r6
 800159c:	10a4      	asrs	r4, r4, #2
 800159e:	2500      	movs	r5, #0
 80015a0:	42a5      	cmp	r5, r4
 80015a2:	d109      	bne.n	80015b8 <__libc_init_array+0x24>
 80015a4:	4e0b      	ldr	r6, [pc, #44]	; (80015d4 <__libc_init_array+0x40>)
 80015a6:	4c0c      	ldr	r4, [pc, #48]	; (80015d8 <__libc_init_array+0x44>)
 80015a8:	f000 fc3c 	bl	8001e24 <_init>
 80015ac:	1ba4      	subs	r4, r4, r6
 80015ae:	10a4      	asrs	r4, r4, #2
 80015b0:	2500      	movs	r5, #0
 80015b2:	42a5      	cmp	r5, r4
 80015b4:	d105      	bne.n	80015c2 <__libc_init_array+0x2e>
 80015b6:	bd70      	pop	{r4, r5, r6, pc}
 80015b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015bc:	4798      	blx	r3
 80015be:	3501      	adds	r5, #1
 80015c0:	e7ee      	b.n	80015a0 <__libc_init_array+0xc>
 80015c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015c6:	4798      	blx	r3
 80015c8:	3501      	adds	r5, #1
 80015ca:	e7f2      	b.n	80015b2 <__libc_init_array+0x1e>
 80015cc:	08001efc 	.word	0x08001efc
 80015d0:	08001efc 	.word	0x08001efc
 80015d4:	08001efc 	.word	0x08001efc
 80015d8:	08001f00 	.word	0x08001f00

080015dc <memset>:
 80015dc:	4402      	add	r2, r0
 80015de:	4603      	mov	r3, r0
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d100      	bne.n	80015e6 <memset+0xa>
 80015e4:	4770      	bx	lr
 80015e6:	f803 1b01 	strb.w	r1, [r3], #1
 80015ea:	e7f9      	b.n	80015e0 <memset+0x4>

080015ec <_vsiprintf_r>:
 80015ec:	b510      	push	{r4, lr}
 80015ee:	b09a      	sub	sp, #104	; 0x68
 80015f0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80015f4:	9100      	str	r1, [sp, #0]
 80015f6:	9104      	str	r1, [sp, #16]
 80015f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015fc:	9102      	str	r1, [sp, #8]
 80015fe:	9105      	str	r1, [sp, #20]
 8001600:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001604:	f8ad 100e 	strh.w	r1, [sp, #14]
 8001608:	4669      	mov	r1, sp
 800160a:	f8ad 400c 	strh.w	r4, [sp, #12]
 800160e:	f000 f86b 	bl	80016e8 <_svfiprintf_r>
 8001612:	9b00      	ldr	r3, [sp, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	b01a      	add	sp, #104	; 0x68
 800161a:	bd10      	pop	{r4, pc}

0800161c <vsiprintf>:
 800161c:	4613      	mov	r3, r2
 800161e:	460a      	mov	r2, r1
 8001620:	4601      	mov	r1, r0
 8001622:	4802      	ldr	r0, [pc, #8]	; (800162c <vsiprintf+0x10>)
 8001624:	6800      	ldr	r0, [r0, #0]
 8001626:	f7ff bfe1 	b.w	80015ec <_vsiprintf_r>
 800162a:	bf00      	nop
 800162c:	2000000c 	.word	0x2000000c

08001630 <__ssputs_r>:
 8001630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001634:	688e      	ldr	r6, [r1, #8]
 8001636:	429e      	cmp	r6, r3
 8001638:	4682      	mov	sl, r0
 800163a:	460c      	mov	r4, r1
 800163c:	4691      	mov	r9, r2
 800163e:	4698      	mov	r8, r3
 8001640:	d835      	bhi.n	80016ae <__ssputs_r+0x7e>
 8001642:	898a      	ldrh	r2, [r1, #12]
 8001644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001648:	d031      	beq.n	80016ae <__ssputs_r+0x7e>
 800164a:	6825      	ldr	r5, [r4, #0]
 800164c:	6909      	ldr	r1, [r1, #16]
 800164e:	1a6f      	subs	r7, r5, r1
 8001650:	6965      	ldr	r5, [r4, #20]
 8001652:	2302      	movs	r3, #2
 8001654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001658:	fb95 f5f3 	sdiv	r5, r5, r3
 800165c:	f108 0301 	add.w	r3, r8, #1
 8001660:	443b      	add	r3, r7
 8001662:	429d      	cmp	r5, r3
 8001664:	bf38      	it	cc
 8001666:	461d      	movcc	r5, r3
 8001668:	0553      	lsls	r3, r2, #21
 800166a:	d531      	bpl.n	80016d0 <__ssputs_r+0xa0>
 800166c:	4629      	mov	r1, r5
 800166e:	f000 fb39 	bl	8001ce4 <_malloc_r>
 8001672:	4606      	mov	r6, r0
 8001674:	b950      	cbnz	r0, 800168c <__ssputs_r+0x5c>
 8001676:	230c      	movs	r3, #12
 8001678:	f8ca 3000 	str.w	r3, [sl]
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001682:	81a3      	strh	r3, [r4, #12]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800168c:	463a      	mov	r2, r7
 800168e:	6921      	ldr	r1, [r4, #16]
 8001690:	f000 fab4 	bl	8001bfc <memcpy>
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800169a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169e:	81a3      	strh	r3, [r4, #12]
 80016a0:	6126      	str	r6, [r4, #16]
 80016a2:	6165      	str	r5, [r4, #20]
 80016a4:	443e      	add	r6, r7
 80016a6:	1bed      	subs	r5, r5, r7
 80016a8:	6026      	str	r6, [r4, #0]
 80016aa:	60a5      	str	r5, [r4, #8]
 80016ac:	4646      	mov	r6, r8
 80016ae:	4546      	cmp	r6, r8
 80016b0:	bf28      	it	cs
 80016b2:	4646      	movcs	r6, r8
 80016b4:	4632      	mov	r2, r6
 80016b6:	4649      	mov	r1, r9
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	f000 faaa 	bl	8001c12 <memmove>
 80016be:	68a3      	ldr	r3, [r4, #8]
 80016c0:	1b9b      	subs	r3, r3, r6
 80016c2:	60a3      	str	r3, [r4, #8]
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	441e      	add	r6, r3
 80016c8:	6026      	str	r6, [r4, #0]
 80016ca:	2000      	movs	r0, #0
 80016cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016d0:	462a      	mov	r2, r5
 80016d2:	f000 fb65 	bl	8001da0 <_realloc_r>
 80016d6:	4606      	mov	r6, r0
 80016d8:	2800      	cmp	r0, #0
 80016da:	d1e1      	bne.n	80016a0 <__ssputs_r+0x70>
 80016dc:	6921      	ldr	r1, [r4, #16]
 80016de:	4650      	mov	r0, sl
 80016e0:	f000 fab2 	bl	8001c48 <_free_r>
 80016e4:	e7c7      	b.n	8001676 <__ssputs_r+0x46>
	...

080016e8 <_svfiprintf_r>:
 80016e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ec:	b09d      	sub	sp, #116	; 0x74
 80016ee:	4680      	mov	r8, r0
 80016f0:	9303      	str	r3, [sp, #12]
 80016f2:	898b      	ldrh	r3, [r1, #12]
 80016f4:	061c      	lsls	r4, r3, #24
 80016f6:	460d      	mov	r5, r1
 80016f8:	4616      	mov	r6, r2
 80016fa:	d50f      	bpl.n	800171c <_svfiprintf_r+0x34>
 80016fc:	690b      	ldr	r3, [r1, #16]
 80016fe:	b96b      	cbnz	r3, 800171c <_svfiprintf_r+0x34>
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	f000 faef 	bl	8001ce4 <_malloc_r>
 8001706:	6028      	str	r0, [r5, #0]
 8001708:	6128      	str	r0, [r5, #16]
 800170a:	b928      	cbnz	r0, 8001718 <_svfiprintf_r+0x30>
 800170c:	230c      	movs	r3, #12
 800170e:	f8c8 3000 	str.w	r3, [r8]
 8001712:	f04f 30ff 	mov.w	r0, #4294967295
 8001716:	e0c5      	b.n	80018a4 <_svfiprintf_r+0x1bc>
 8001718:	2340      	movs	r3, #64	; 0x40
 800171a:	616b      	str	r3, [r5, #20]
 800171c:	2300      	movs	r3, #0
 800171e:	9309      	str	r3, [sp, #36]	; 0x24
 8001720:	2320      	movs	r3, #32
 8001722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001726:	2330      	movs	r3, #48	; 0x30
 8001728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800172c:	f04f 0b01 	mov.w	fp, #1
 8001730:	4637      	mov	r7, r6
 8001732:	463c      	mov	r4, r7
 8001734:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d13c      	bne.n	80017b6 <_svfiprintf_r+0xce>
 800173c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001740:	d00b      	beq.n	800175a <_svfiprintf_r+0x72>
 8001742:	4653      	mov	r3, sl
 8001744:	4632      	mov	r2, r6
 8001746:	4629      	mov	r1, r5
 8001748:	4640      	mov	r0, r8
 800174a:	f7ff ff71 	bl	8001630 <__ssputs_r>
 800174e:	3001      	adds	r0, #1
 8001750:	f000 80a3 	beq.w	800189a <_svfiprintf_r+0x1b2>
 8001754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001756:	4453      	add	r3, sl
 8001758:	9309      	str	r3, [sp, #36]	; 0x24
 800175a:	783b      	ldrb	r3, [r7, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 809c 	beq.w	800189a <_svfiprintf_r+0x1b2>
 8001762:	2300      	movs	r3, #0
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	9304      	str	r3, [sp, #16]
 800176a:	9307      	str	r3, [sp, #28]
 800176c:	9205      	str	r2, [sp, #20]
 800176e:	9306      	str	r3, [sp, #24]
 8001770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001774:	931a      	str	r3, [sp, #104]	; 0x68
 8001776:	2205      	movs	r2, #5
 8001778:	7821      	ldrb	r1, [r4, #0]
 800177a:	4850      	ldr	r0, [pc, #320]	; (80018bc <_svfiprintf_r+0x1d4>)
 800177c:	f7fe fd30 	bl	80001e0 <memchr>
 8001780:	1c67      	adds	r7, r4, #1
 8001782:	9b04      	ldr	r3, [sp, #16]
 8001784:	b9d8      	cbnz	r0, 80017be <_svfiprintf_r+0xd6>
 8001786:	06d9      	lsls	r1, r3, #27
 8001788:	bf44      	itt	mi
 800178a:	2220      	movmi	r2, #32
 800178c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001790:	071a      	lsls	r2, r3, #28
 8001792:	bf44      	itt	mi
 8001794:	222b      	movmi	r2, #43	; 0x2b
 8001796:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800179a:	7822      	ldrb	r2, [r4, #0]
 800179c:	2a2a      	cmp	r2, #42	; 0x2a
 800179e:	d016      	beq.n	80017ce <_svfiprintf_r+0xe6>
 80017a0:	9a07      	ldr	r2, [sp, #28]
 80017a2:	2100      	movs	r1, #0
 80017a4:	200a      	movs	r0, #10
 80017a6:	4627      	mov	r7, r4
 80017a8:	3401      	adds	r4, #1
 80017aa:	783b      	ldrb	r3, [r7, #0]
 80017ac:	3b30      	subs	r3, #48	; 0x30
 80017ae:	2b09      	cmp	r3, #9
 80017b0:	d951      	bls.n	8001856 <_svfiprintf_r+0x16e>
 80017b2:	b1c9      	cbz	r1, 80017e8 <_svfiprintf_r+0x100>
 80017b4:	e011      	b.n	80017da <_svfiprintf_r+0xf2>
 80017b6:	2b25      	cmp	r3, #37	; 0x25
 80017b8:	d0c0      	beq.n	800173c <_svfiprintf_r+0x54>
 80017ba:	4627      	mov	r7, r4
 80017bc:	e7b9      	b.n	8001732 <_svfiprintf_r+0x4a>
 80017be:	4a3f      	ldr	r2, [pc, #252]	; (80018bc <_svfiprintf_r+0x1d4>)
 80017c0:	1a80      	subs	r0, r0, r2
 80017c2:	fa0b f000 	lsl.w	r0, fp, r0
 80017c6:	4318      	orrs	r0, r3
 80017c8:	9004      	str	r0, [sp, #16]
 80017ca:	463c      	mov	r4, r7
 80017cc:	e7d3      	b.n	8001776 <_svfiprintf_r+0x8e>
 80017ce:	9a03      	ldr	r2, [sp, #12]
 80017d0:	1d11      	adds	r1, r2, #4
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	9103      	str	r1, [sp, #12]
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	db01      	blt.n	80017de <_svfiprintf_r+0xf6>
 80017da:	9207      	str	r2, [sp, #28]
 80017dc:	e004      	b.n	80017e8 <_svfiprintf_r+0x100>
 80017de:	4252      	negs	r2, r2
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	9207      	str	r2, [sp, #28]
 80017e6:	9304      	str	r3, [sp, #16]
 80017e8:	783b      	ldrb	r3, [r7, #0]
 80017ea:	2b2e      	cmp	r3, #46	; 0x2e
 80017ec:	d10e      	bne.n	800180c <_svfiprintf_r+0x124>
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	2b2a      	cmp	r3, #42	; 0x2a
 80017f2:	f107 0101 	add.w	r1, r7, #1
 80017f6:	d132      	bne.n	800185e <_svfiprintf_r+0x176>
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	1d1a      	adds	r2, r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	9203      	str	r2, [sp, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfb8      	it	lt
 8001804:	f04f 33ff 	movlt.w	r3, #4294967295
 8001808:	3702      	adds	r7, #2
 800180a:	9305      	str	r3, [sp, #20]
 800180c:	4c2c      	ldr	r4, [pc, #176]	; (80018c0 <_svfiprintf_r+0x1d8>)
 800180e:	7839      	ldrb	r1, [r7, #0]
 8001810:	2203      	movs	r2, #3
 8001812:	4620      	mov	r0, r4
 8001814:	f7fe fce4 	bl	80001e0 <memchr>
 8001818:	b138      	cbz	r0, 800182a <_svfiprintf_r+0x142>
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	1b00      	subs	r0, r0, r4
 800181e:	fa03 f000 	lsl.w	r0, r3, r0
 8001822:	9b04      	ldr	r3, [sp, #16]
 8001824:	4303      	orrs	r3, r0
 8001826:	9304      	str	r3, [sp, #16]
 8001828:	3701      	adds	r7, #1
 800182a:	7839      	ldrb	r1, [r7, #0]
 800182c:	4825      	ldr	r0, [pc, #148]	; (80018c4 <_svfiprintf_r+0x1dc>)
 800182e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001832:	2206      	movs	r2, #6
 8001834:	1c7e      	adds	r6, r7, #1
 8001836:	f7fe fcd3 	bl	80001e0 <memchr>
 800183a:	2800      	cmp	r0, #0
 800183c:	d035      	beq.n	80018aa <_svfiprintf_r+0x1c2>
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <_svfiprintf_r+0x1e0>)
 8001840:	b9fb      	cbnz	r3, 8001882 <_svfiprintf_r+0x19a>
 8001842:	9b03      	ldr	r3, [sp, #12]
 8001844:	3307      	adds	r3, #7
 8001846:	f023 0307 	bic.w	r3, r3, #7
 800184a:	3308      	adds	r3, #8
 800184c:	9303      	str	r3, [sp, #12]
 800184e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001850:	444b      	add	r3, r9
 8001852:	9309      	str	r3, [sp, #36]	; 0x24
 8001854:	e76c      	b.n	8001730 <_svfiprintf_r+0x48>
 8001856:	fb00 3202 	mla	r2, r0, r2, r3
 800185a:	2101      	movs	r1, #1
 800185c:	e7a3      	b.n	80017a6 <_svfiprintf_r+0xbe>
 800185e:	2300      	movs	r3, #0
 8001860:	9305      	str	r3, [sp, #20]
 8001862:	4618      	mov	r0, r3
 8001864:	240a      	movs	r4, #10
 8001866:	460f      	mov	r7, r1
 8001868:	3101      	adds	r1, #1
 800186a:	783a      	ldrb	r2, [r7, #0]
 800186c:	3a30      	subs	r2, #48	; 0x30
 800186e:	2a09      	cmp	r2, #9
 8001870:	d903      	bls.n	800187a <_svfiprintf_r+0x192>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ca      	beq.n	800180c <_svfiprintf_r+0x124>
 8001876:	9005      	str	r0, [sp, #20]
 8001878:	e7c8      	b.n	800180c <_svfiprintf_r+0x124>
 800187a:	fb04 2000 	mla	r0, r4, r0, r2
 800187e:	2301      	movs	r3, #1
 8001880:	e7f1      	b.n	8001866 <_svfiprintf_r+0x17e>
 8001882:	ab03      	add	r3, sp, #12
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	462a      	mov	r2, r5
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_svfiprintf_r+0x1e4>)
 800188a:	a904      	add	r1, sp, #16
 800188c:	4640      	mov	r0, r8
 800188e:	f3af 8000 	nop.w
 8001892:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001896:	4681      	mov	r9, r0
 8001898:	d1d9      	bne.n	800184e <_svfiprintf_r+0x166>
 800189a:	89ab      	ldrh	r3, [r5, #12]
 800189c:	065b      	lsls	r3, r3, #25
 800189e:	f53f af38 	bmi.w	8001712 <_svfiprintf_r+0x2a>
 80018a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018a4:	b01d      	add	sp, #116	; 0x74
 80018a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018aa:	ab03      	add	r3, sp, #12
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	462a      	mov	r2, r5
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <_svfiprintf_r+0x1e4>)
 80018b2:	a904      	add	r1, sp, #16
 80018b4:	4640      	mov	r0, r8
 80018b6:	f000 f881 	bl	80019bc <_printf_i>
 80018ba:	e7ea      	b.n	8001892 <_svfiprintf_r+0x1aa>
 80018bc:	08001ec1 	.word	0x08001ec1
 80018c0:	08001ec7 	.word	0x08001ec7
 80018c4:	08001ecb 	.word	0x08001ecb
 80018c8:	00000000 	.word	0x00000000
 80018cc:	08001631 	.word	0x08001631

080018d0 <_printf_common>:
 80018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d4:	4691      	mov	r9, r2
 80018d6:	461f      	mov	r7, r3
 80018d8:	688a      	ldr	r2, [r1, #8]
 80018da:	690b      	ldr	r3, [r1, #16]
 80018dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	bfb8      	it	lt
 80018e4:	4613      	movlt	r3, r2
 80018e6:	f8c9 3000 	str.w	r3, [r9]
 80018ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018ee:	4606      	mov	r6, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	b112      	cbz	r2, 80018fa <_printf_common+0x2a>
 80018f4:	3301      	adds	r3, #1
 80018f6:	f8c9 3000 	str.w	r3, [r9]
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	0699      	lsls	r1, r3, #26
 80018fe:	bf42      	ittt	mi
 8001900:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001904:	3302      	addmi	r3, #2
 8001906:	f8c9 3000 	strmi.w	r3, [r9]
 800190a:	6825      	ldr	r5, [r4, #0]
 800190c:	f015 0506 	ands.w	r5, r5, #6
 8001910:	d107      	bne.n	8001922 <_printf_common+0x52>
 8001912:	f104 0a19 	add.w	sl, r4, #25
 8001916:	68e3      	ldr	r3, [r4, #12]
 8001918:	f8d9 2000 	ldr.w	r2, [r9]
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	429d      	cmp	r5, r3
 8001920:	db29      	blt.n	8001976 <_printf_common+0xa6>
 8001922:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	3300      	adds	r3, #0
 800192a:	bf18      	it	ne
 800192c:	2301      	movne	r3, #1
 800192e:	0692      	lsls	r2, r2, #26
 8001930:	d42e      	bmi.n	8001990 <_printf_common+0xc0>
 8001932:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001936:	4639      	mov	r1, r7
 8001938:	4630      	mov	r0, r6
 800193a:	47c0      	blx	r8
 800193c:	3001      	adds	r0, #1
 800193e:	d021      	beq.n	8001984 <_printf_common+0xb4>
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	68e5      	ldr	r5, [r4, #12]
 8001944:	f8d9 2000 	ldr.w	r2, [r9]
 8001948:	f003 0306 	and.w	r3, r3, #6
 800194c:	2b04      	cmp	r3, #4
 800194e:	bf08      	it	eq
 8001950:	1aad      	subeq	r5, r5, r2
 8001952:	68a3      	ldr	r3, [r4, #8]
 8001954:	6922      	ldr	r2, [r4, #16]
 8001956:	bf0c      	ite	eq
 8001958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800195c:	2500      	movne	r5, #0
 800195e:	4293      	cmp	r3, r2
 8001960:	bfc4      	itt	gt
 8001962:	1a9b      	subgt	r3, r3, r2
 8001964:	18ed      	addgt	r5, r5, r3
 8001966:	f04f 0900 	mov.w	r9, #0
 800196a:	341a      	adds	r4, #26
 800196c:	454d      	cmp	r5, r9
 800196e:	d11b      	bne.n	80019a8 <_printf_common+0xd8>
 8001970:	2000      	movs	r0, #0
 8001972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001976:	2301      	movs	r3, #1
 8001978:	4652      	mov	r2, sl
 800197a:	4639      	mov	r1, r7
 800197c:	4630      	mov	r0, r6
 800197e:	47c0      	blx	r8
 8001980:	3001      	adds	r0, #1
 8001982:	d103      	bne.n	800198c <_printf_common+0xbc>
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800198c:	3501      	adds	r5, #1
 800198e:	e7c2      	b.n	8001916 <_printf_common+0x46>
 8001990:	18e1      	adds	r1, r4, r3
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	2030      	movs	r0, #48	; 0x30
 8001996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800199a:	4422      	add	r2, r4
 800199c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019a4:	3302      	adds	r3, #2
 80019a6:	e7c4      	b.n	8001932 <_printf_common+0x62>
 80019a8:	2301      	movs	r3, #1
 80019aa:	4622      	mov	r2, r4
 80019ac:	4639      	mov	r1, r7
 80019ae:	4630      	mov	r0, r6
 80019b0:	47c0      	blx	r8
 80019b2:	3001      	adds	r0, #1
 80019b4:	d0e6      	beq.n	8001984 <_printf_common+0xb4>
 80019b6:	f109 0901 	add.w	r9, r9, #1
 80019ba:	e7d7      	b.n	800196c <_printf_common+0x9c>

080019bc <_printf_i>:
 80019bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019c0:	4617      	mov	r7, r2
 80019c2:	7e0a      	ldrb	r2, [r1, #24]
 80019c4:	b085      	sub	sp, #20
 80019c6:	2a6e      	cmp	r2, #110	; 0x6e
 80019c8:	4698      	mov	r8, r3
 80019ca:	4606      	mov	r6, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80019d4:	f000 80bc 	beq.w	8001b50 <_printf_i+0x194>
 80019d8:	d81a      	bhi.n	8001a10 <_printf_i+0x54>
 80019da:	2a63      	cmp	r2, #99	; 0x63
 80019dc:	d02e      	beq.n	8001a3c <_printf_i+0x80>
 80019de:	d80a      	bhi.n	80019f6 <_printf_i+0x3a>
 80019e0:	2a00      	cmp	r2, #0
 80019e2:	f000 80c8 	beq.w	8001b76 <_printf_i+0x1ba>
 80019e6:	2a58      	cmp	r2, #88	; 0x58
 80019e8:	f000 808a 	beq.w	8001b00 <_printf_i+0x144>
 80019ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80019f4:	e02a      	b.n	8001a4c <_printf_i+0x90>
 80019f6:	2a64      	cmp	r2, #100	; 0x64
 80019f8:	d001      	beq.n	80019fe <_printf_i+0x42>
 80019fa:	2a69      	cmp	r2, #105	; 0x69
 80019fc:	d1f6      	bne.n	80019ec <_printf_i+0x30>
 80019fe:	6821      	ldr	r1, [r4, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a06:	d023      	beq.n	8001a50 <_printf_i+0x94>
 8001a08:	1d11      	adds	r1, r2, #4
 8001a0a:	6019      	str	r1, [r3, #0]
 8001a0c:	6813      	ldr	r3, [r2, #0]
 8001a0e:	e027      	b.n	8001a60 <_printf_i+0xa4>
 8001a10:	2a73      	cmp	r2, #115	; 0x73
 8001a12:	f000 80b4 	beq.w	8001b7e <_printf_i+0x1c2>
 8001a16:	d808      	bhi.n	8001a2a <_printf_i+0x6e>
 8001a18:	2a6f      	cmp	r2, #111	; 0x6f
 8001a1a:	d02a      	beq.n	8001a72 <_printf_i+0xb6>
 8001a1c:	2a70      	cmp	r2, #112	; 0x70
 8001a1e:	d1e5      	bne.n	80019ec <_printf_i+0x30>
 8001a20:	680a      	ldr	r2, [r1, #0]
 8001a22:	f042 0220 	orr.w	r2, r2, #32
 8001a26:	600a      	str	r2, [r1, #0]
 8001a28:	e003      	b.n	8001a32 <_printf_i+0x76>
 8001a2a:	2a75      	cmp	r2, #117	; 0x75
 8001a2c:	d021      	beq.n	8001a72 <_printf_i+0xb6>
 8001a2e:	2a78      	cmp	r2, #120	; 0x78
 8001a30:	d1dc      	bne.n	80019ec <_printf_i+0x30>
 8001a32:	2278      	movs	r2, #120	; 0x78
 8001a34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001a38:	496e      	ldr	r1, [pc, #440]	; (8001bf4 <_printf_i+0x238>)
 8001a3a:	e064      	b.n	8001b06 <_printf_i+0x14a>
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001a42:	1d11      	adds	r1, r2, #4
 8001a44:	6019      	str	r1, [r3, #0]
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0a3      	b.n	8001b98 <_printf_i+0x1dc>
 8001a50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001a54:	f102 0104 	add.w	r1, r2, #4
 8001a58:	6019      	str	r1, [r3, #0]
 8001a5a:	d0d7      	beq.n	8001a0c <_printf_i+0x50>
 8001a5c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da03      	bge.n	8001a6c <_printf_i+0xb0>
 8001a64:	222d      	movs	r2, #45	; 0x2d
 8001a66:	425b      	negs	r3, r3
 8001a68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a6c:	4962      	ldr	r1, [pc, #392]	; (8001bf8 <_printf_i+0x23c>)
 8001a6e:	220a      	movs	r2, #10
 8001a70:	e017      	b.n	8001aa2 <_printf_i+0xe6>
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001a7a:	d003      	beq.n	8001a84 <_printf_i+0xc8>
 8001a7c:	1d08      	adds	r0, r1, #4
 8001a7e:	6018      	str	r0, [r3, #0]
 8001a80:	680b      	ldr	r3, [r1, #0]
 8001a82:	e006      	b.n	8001a92 <_printf_i+0xd6>
 8001a84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a88:	f101 0004 	add.w	r0, r1, #4
 8001a8c:	6018      	str	r0, [r3, #0]
 8001a8e:	d0f7      	beq.n	8001a80 <_printf_i+0xc4>
 8001a90:	880b      	ldrh	r3, [r1, #0]
 8001a92:	4959      	ldr	r1, [pc, #356]	; (8001bf8 <_printf_i+0x23c>)
 8001a94:	2a6f      	cmp	r2, #111	; 0x6f
 8001a96:	bf14      	ite	ne
 8001a98:	220a      	movne	r2, #10
 8001a9a:	2208      	moveq	r2, #8
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001aa2:	6865      	ldr	r5, [r4, #4]
 8001aa4:	60a5      	str	r5, [r4, #8]
 8001aa6:	2d00      	cmp	r5, #0
 8001aa8:	f2c0 809c 	blt.w	8001be4 <_printf_i+0x228>
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	f020 0004 	bic.w	r0, r0, #4
 8001ab2:	6020      	str	r0, [r4, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d13f      	bne.n	8001b38 <_printf_i+0x17c>
 8001ab8:	2d00      	cmp	r5, #0
 8001aba:	f040 8095 	bne.w	8001be8 <_printf_i+0x22c>
 8001abe:	4675      	mov	r5, lr
 8001ac0:	2a08      	cmp	r2, #8
 8001ac2:	d10b      	bne.n	8001adc <_printf_i+0x120>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	07da      	lsls	r2, r3, #31
 8001ac8:	d508      	bpl.n	8001adc <_printf_i+0x120>
 8001aca:	6923      	ldr	r3, [r4, #16]
 8001acc:	6862      	ldr	r2, [r4, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	bfde      	ittt	le
 8001ad2:	2330      	movle	r3, #48	; 0x30
 8001ad4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ad8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001adc:	ebae 0305 	sub.w	r3, lr, r5
 8001ae0:	6123      	str	r3, [r4, #16]
 8001ae2:	f8cd 8000 	str.w	r8, [sp]
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	aa03      	add	r2, sp, #12
 8001aea:	4621      	mov	r1, r4
 8001aec:	4630      	mov	r0, r6
 8001aee:	f7ff feef 	bl	80018d0 <_printf_common>
 8001af2:	3001      	adds	r0, #1
 8001af4:	d155      	bne.n	8001ba2 <_printf_i+0x1e6>
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295
 8001afa:	b005      	add	sp, #20
 8001afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001b04:	493c      	ldr	r1, [pc, #240]	; (8001bf8 <_printf_i+0x23c>)
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001b0e:	f100 0504 	add.w	r5, r0, #4
 8001b12:	601d      	str	r5, [r3, #0]
 8001b14:	d001      	beq.n	8001b1a <_printf_i+0x15e>
 8001b16:	6803      	ldr	r3, [r0, #0]
 8001b18:	e002      	b.n	8001b20 <_printf_i+0x164>
 8001b1a:	0655      	lsls	r5, r2, #25
 8001b1c:	d5fb      	bpl.n	8001b16 <_printf_i+0x15a>
 8001b1e:	8803      	ldrh	r3, [r0, #0]
 8001b20:	07d0      	lsls	r0, r2, #31
 8001b22:	bf44      	itt	mi
 8001b24:	f042 0220 	orrmi.w	r2, r2, #32
 8001b28:	6022      	strmi	r2, [r4, #0]
 8001b2a:	b91b      	cbnz	r3, 8001b34 <_printf_i+0x178>
 8001b2c:	6822      	ldr	r2, [r4, #0]
 8001b2e:	f022 0220 	bic.w	r2, r2, #32
 8001b32:	6022      	str	r2, [r4, #0]
 8001b34:	2210      	movs	r2, #16
 8001b36:	e7b1      	b.n	8001a9c <_printf_i+0xe0>
 8001b38:	4675      	mov	r5, lr
 8001b3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8001b3e:	fb02 3310 	mls	r3, r2, r0, r3
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d1f5      	bne.n	8001b3a <_printf_i+0x17e>
 8001b4e:	e7b7      	b.n	8001ac0 <_printf_i+0x104>
 8001b50:	6808      	ldr	r0, [r1, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	6949      	ldr	r1, [r1, #20]
 8001b56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b5a:	d004      	beq.n	8001b66 <_printf_i+0x1aa>
 8001b5c:	1d10      	adds	r0, r2, #4
 8001b5e:	6018      	str	r0, [r3, #0]
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	6019      	str	r1, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <_printf_i+0x1ba>
 8001b66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b6a:	f102 0004 	add.w	r0, r2, #4
 8001b6e:	6018      	str	r0, [r3, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	d0f6      	beq.n	8001b62 <_printf_i+0x1a6>
 8001b74:	8019      	strh	r1, [r3, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	6123      	str	r3, [r4, #16]
 8001b7a:	4675      	mov	r5, lr
 8001b7c:	e7b1      	b.n	8001ae2 <_printf_i+0x126>
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	1d11      	adds	r1, r2, #4
 8001b82:	6019      	str	r1, [r3, #0]
 8001b84:	6815      	ldr	r5, [r2, #0]
 8001b86:	6862      	ldr	r2, [r4, #4]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f7fe fb28 	bl	80001e0 <memchr>
 8001b90:	b108      	cbz	r0, 8001b96 <_printf_i+0x1da>
 8001b92:	1b40      	subs	r0, r0, r5
 8001b94:	6060      	str	r0, [r4, #4]
 8001b96:	6863      	ldr	r3, [r4, #4]
 8001b98:	6123      	str	r3, [r4, #16]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ba0:	e79f      	b.n	8001ae2 <_printf_i+0x126>
 8001ba2:	6923      	ldr	r3, [r4, #16]
 8001ba4:	462a      	mov	r2, r5
 8001ba6:	4639      	mov	r1, r7
 8001ba8:	4630      	mov	r0, r6
 8001baa:	47c0      	blx	r8
 8001bac:	3001      	adds	r0, #1
 8001bae:	d0a2      	beq.n	8001af6 <_printf_i+0x13a>
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	079b      	lsls	r3, r3, #30
 8001bb4:	d507      	bpl.n	8001bc6 <_printf_i+0x20a>
 8001bb6:	2500      	movs	r5, #0
 8001bb8:	f104 0919 	add.w	r9, r4, #25
 8001bbc:	68e3      	ldr	r3, [r4, #12]
 8001bbe:	9a03      	ldr	r2, [sp, #12]
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	429d      	cmp	r5, r3
 8001bc4:	db05      	blt.n	8001bd2 <_printf_i+0x216>
 8001bc6:	68e0      	ldr	r0, [r4, #12]
 8001bc8:	9b03      	ldr	r3, [sp, #12]
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	bfb8      	it	lt
 8001bce:	4618      	movlt	r0, r3
 8001bd0:	e793      	b.n	8001afa <_printf_i+0x13e>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	464a      	mov	r2, r9
 8001bd6:	4639      	mov	r1, r7
 8001bd8:	4630      	mov	r0, r6
 8001bda:	47c0      	blx	r8
 8001bdc:	3001      	adds	r0, #1
 8001bde:	d08a      	beq.n	8001af6 <_printf_i+0x13a>
 8001be0:	3501      	adds	r5, #1
 8001be2:	e7eb      	b.n	8001bbc <_printf_i+0x200>
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1a7      	bne.n	8001b38 <_printf_i+0x17c>
 8001be8:	780b      	ldrb	r3, [r1, #0]
 8001bea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf2:	e765      	b.n	8001ac0 <_printf_i+0x104>
 8001bf4:	08001ee3 	.word	0x08001ee3
 8001bf8:	08001ed2 	.word	0x08001ed2

08001bfc <memcpy>:
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	1e43      	subs	r3, r0, #1
 8001c00:	440a      	add	r2, r1
 8001c02:	4291      	cmp	r1, r2
 8001c04:	d100      	bne.n	8001c08 <memcpy+0xc>
 8001c06:	bd10      	pop	{r4, pc}
 8001c08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c10:	e7f7      	b.n	8001c02 <memcpy+0x6>

08001c12 <memmove>:
 8001c12:	4288      	cmp	r0, r1
 8001c14:	b510      	push	{r4, lr}
 8001c16:	eb01 0302 	add.w	r3, r1, r2
 8001c1a:	d803      	bhi.n	8001c24 <memmove+0x12>
 8001c1c:	1e42      	subs	r2, r0, #1
 8001c1e:	4299      	cmp	r1, r3
 8001c20:	d10c      	bne.n	8001c3c <memmove+0x2a>
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	4298      	cmp	r0, r3
 8001c26:	d2f9      	bcs.n	8001c1c <memmove+0xa>
 8001c28:	1881      	adds	r1, r0, r2
 8001c2a:	1ad2      	subs	r2, r2, r3
 8001c2c:	42d3      	cmn	r3, r2
 8001c2e:	d100      	bne.n	8001c32 <memmove+0x20>
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001c3a:	e7f7      	b.n	8001c2c <memmove+0x1a>
 8001c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001c44:	e7eb      	b.n	8001c1e <memmove+0xc>
	...

08001c48 <_free_r>:
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	d045      	beq.n	8001cdc <_free_r+0x94>
 8001c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c54:	1f0c      	subs	r4, r1, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bfb8      	it	lt
 8001c5a:	18e4      	addlt	r4, r4, r3
 8001c5c:	f000 f8d6 	bl	8001e0c <__malloc_lock>
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <_free_r+0x98>)
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	4610      	mov	r0, r2
 8001c66:	b933      	cbnz	r3, 8001c76 <_free_r+0x2e>
 8001c68:	6063      	str	r3, [r4, #4]
 8001c6a:	6014      	str	r4, [r2, #0]
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c72:	f000 b8cc 	b.w	8001e0e <__malloc_unlock>
 8001c76:	42a3      	cmp	r3, r4
 8001c78:	d90c      	bls.n	8001c94 <_free_r+0x4c>
 8001c7a:	6821      	ldr	r1, [r4, #0]
 8001c7c:	1862      	adds	r2, r4, r1
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	bf04      	itt	eq
 8001c82:	681a      	ldreq	r2, [r3, #0]
 8001c84:	685b      	ldreq	r3, [r3, #4]
 8001c86:	6063      	str	r3, [r4, #4]
 8001c88:	bf04      	itt	eq
 8001c8a:	1852      	addeq	r2, r2, r1
 8001c8c:	6022      	streq	r2, [r4, #0]
 8001c8e:	6004      	str	r4, [r0, #0]
 8001c90:	e7ec      	b.n	8001c6c <_free_r+0x24>
 8001c92:	4613      	mov	r3, r2
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	b10a      	cbz	r2, 8001c9c <_free_r+0x54>
 8001c98:	42a2      	cmp	r2, r4
 8001c9a:	d9fa      	bls.n	8001c92 <_free_r+0x4a>
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	1858      	adds	r0, r3, r1
 8001ca0:	42a0      	cmp	r0, r4
 8001ca2:	d10b      	bne.n	8001cbc <_free_r+0x74>
 8001ca4:	6820      	ldr	r0, [r4, #0]
 8001ca6:	4401      	add	r1, r0
 8001ca8:	1858      	adds	r0, r3, r1
 8001caa:	4282      	cmp	r2, r0
 8001cac:	6019      	str	r1, [r3, #0]
 8001cae:	d1dd      	bne.n	8001c6c <_free_r+0x24>
 8001cb0:	6810      	ldr	r0, [r2, #0]
 8001cb2:	6852      	ldr	r2, [r2, #4]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	4401      	add	r1, r0
 8001cb8:	6019      	str	r1, [r3, #0]
 8001cba:	e7d7      	b.n	8001c6c <_free_r+0x24>
 8001cbc:	d902      	bls.n	8001cc4 <_free_r+0x7c>
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	602b      	str	r3, [r5, #0]
 8001cc2:	e7d3      	b.n	8001c6c <_free_r+0x24>
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	1821      	adds	r1, r4, r0
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	bf04      	itt	eq
 8001ccc:	6811      	ldreq	r1, [r2, #0]
 8001cce:	6852      	ldreq	r2, [r2, #4]
 8001cd0:	6062      	str	r2, [r4, #4]
 8001cd2:	bf04      	itt	eq
 8001cd4:	1809      	addeq	r1, r1, r0
 8001cd6:	6021      	streq	r1, [r4, #0]
 8001cd8:	605c      	str	r4, [r3, #4]
 8001cda:	e7c7      	b.n	8001c6c <_free_r+0x24>
 8001cdc:	bd38      	pop	{r3, r4, r5, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000090 	.word	0x20000090

08001ce4 <_malloc_r>:
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	1ccd      	adds	r5, r1, #3
 8001ce8:	f025 0503 	bic.w	r5, r5, #3
 8001cec:	3508      	adds	r5, #8
 8001cee:	2d0c      	cmp	r5, #12
 8001cf0:	bf38      	it	cc
 8001cf2:	250c      	movcc	r5, #12
 8001cf4:	2d00      	cmp	r5, #0
 8001cf6:	4606      	mov	r6, r0
 8001cf8:	db01      	blt.n	8001cfe <_malloc_r+0x1a>
 8001cfa:	42a9      	cmp	r1, r5
 8001cfc:	d903      	bls.n	8001d06 <_malloc_r+0x22>
 8001cfe:	230c      	movs	r3, #12
 8001d00:	6033      	str	r3, [r6, #0]
 8001d02:	2000      	movs	r0, #0
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
 8001d06:	f000 f881 	bl	8001e0c <__malloc_lock>
 8001d0a:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <_malloc_r+0xb4>)
 8001d0c:	6814      	ldr	r4, [r2, #0]
 8001d0e:	4621      	mov	r1, r4
 8001d10:	b991      	cbnz	r1, 8001d38 <_malloc_r+0x54>
 8001d12:	4c22      	ldr	r4, [pc, #136]	; (8001d9c <_malloc_r+0xb8>)
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	b91b      	cbnz	r3, 8001d20 <_malloc_r+0x3c>
 8001d18:	4630      	mov	r0, r6
 8001d1a:	f000 f867 	bl	8001dec <_sbrk_r>
 8001d1e:	6020      	str	r0, [r4, #0]
 8001d20:	4629      	mov	r1, r5
 8001d22:	4630      	mov	r0, r6
 8001d24:	f000 f862 	bl	8001dec <_sbrk_r>
 8001d28:	1c43      	adds	r3, r0, #1
 8001d2a:	d126      	bne.n	8001d7a <_malloc_r+0x96>
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	6033      	str	r3, [r6, #0]
 8001d30:	4630      	mov	r0, r6
 8001d32:	f000 f86c 	bl	8001e0e <__malloc_unlock>
 8001d36:	e7e4      	b.n	8001d02 <_malloc_r+0x1e>
 8001d38:	680b      	ldr	r3, [r1, #0]
 8001d3a:	1b5b      	subs	r3, r3, r5
 8001d3c:	d41a      	bmi.n	8001d74 <_malloc_r+0x90>
 8001d3e:	2b0b      	cmp	r3, #11
 8001d40:	d90f      	bls.n	8001d62 <_malloc_r+0x7e>
 8001d42:	600b      	str	r3, [r1, #0]
 8001d44:	50cd      	str	r5, [r1, r3]
 8001d46:	18cc      	adds	r4, r1, r3
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f000 f860 	bl	8001e0e <__malloc_unlock>
 8001d4e:	f104 000b 	add.w	r0, r4, #11
 8001d52:	1d23      	adds	r3, r4, #4
 8001d54:	f020 0007 	bic.w	r0, r0, #7
 8001d58:	1ac3      	subs	r3, r0, r3
 8001d5a:	d01b      	beq.n	8001d94 <_malloc_r+0xb0>
 8001d5c:	425a      	negs	r2, r3
 8001d5e:	50e2      	str	r2, [r4, r3]
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
 8001d62:	428c      	cmp	r4, r1
 8001d64:	bf0d      	iteet	eq
 8001d66:	6863      	ldreq	r3, [r4, #4]
 8001d68:	684b      	ldrne	r3, [r1, #4]
 8001d6a:	6063      	strne	r3, [r4, #4]
 8001d6c:	6013      	streq	r3, [r2, #0]
 8001d6e:	bf18      	it	ne
 8001d70:	460c      	movne	r4, r1
 8001d72:	e7e9      	b.n	8001d48 <_malloc_r+0x64>
 8001d74:	460c      	mov	r4, r1
 8001d76:	6849      	ldr	r1, [r1, #4]
 8001d78:	e7ca      	b.n	8001d10 <_malloc_r+0x2c>
 8001d7a:	1cc4      	adds	r4, r0, #3
 8001d7c:	f024 0403 	bic.w	r4, r4, #3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	d005      	beq.n	8001d90 <_malloc_r+0xac>
 8001d84:	1a21      	subs	r1, r4, r0
 8001d86:	4630      	mov	r0, r6
 8001d88:	f000 f830 	bl	8001dec <_sbrk_r>
 8001d8c:	3001      	adds	r0, #1
 8001d8e:	d0cd      	beq.n	8001d2c <_malloc_r+0x48>
 8001d90:	6025      	str	r5, [r4, #0]
 8001d92:	e7d9      	b.n	8001d48 <_malloc_r+0x64>
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
 8001d96:	bf00      	nop
 8001d98:	20000090 	.word	0x20000090
 8001d9c:	20000094 	.word	0x20000094

08001da0 <_realloc_r>:
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da2:	4607      	mov	r7, r0
 8001da4:	4614      	mov	r4, r2
 8001da6:	460e      	mov	r6, r1
 8001da8:	b921      	cbnz	r1, 8001db4 <_realloc_r+0x14>
 8001daa:	4611      	mov	r1, r2
 8001dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001db0:	f7ff bf98 	b.w	8001ce4 <_malloc_r>
 8001db4:	b922      	cbnz	r2, 8001dc0 <_realloc_r+0x20>
 8001db6:	f7ff ff47 	bl	8001c48 <_free_r>
 8001dba:	4625      	mov	r5, r4
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dc0:	f000 f826 	bl	8001e10 <_malloc_usable_size_r>
 8001dc4:	4284      	cmp	r4, r0
 8001dc6:	d90f      	bls.n	8001de8 <_realloc_r+0x48>
 8001dc8:	4621      	mov	r1, r4
 8001dca:	4638      	mov	r0, r7
 8001dcc:	f7ff ff8a 	bl	8001ce4 <_malloc_r>
 8001dd0:	4605      	mov	r5, r0
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d0f2      	beq.n	8001dbc <_realloc_r+0x1c>
 8001dd6:	4631      	mov	r1, r6
 8001dd8:	4622      	mov	r2, r4
 8001dda:	f7ff ff0f 	bl	8001bfc <memcpy>
 8001dde:	4631      	mov	r1, r6
 8001de0:	4638      	mov	r0, r7
 8001de2:	f7ff ff31 	bl	8001c48 <_free_r>
 8001de6:	e7e9      	b.n	8001dbc <_realloc_r+0x1c>
 8001de8:	4635      	mov	r5, r6
 8001dea:	e7e7      	b.n	8001dbc <_realloc_r+0x1c>

08001dec <_sbrk_r>:
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4c06      	ldr	r4, [pc, #24]	; (8001e08 <_sbrk_r+0x1c>)
 8001df0:	2300      	movs	r3, #0
 8001df2:	4605      	mov	r5, r0
 8001df4:	4608      	mov	r0, r1
 8001df6:	6023      	str	r3, [r4, #0]
 8001df8:	f7ff fb5c 	bl	80014b4 <_sbrk>
 8001dfc:	1c43      	adds	r3, r0, #1
 8001dfe:	d102      	bne.n	8001e06 <_sbrk_r+0x1a>
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	b103      	cbz	r3, 8001e06 <_sbrk_r+0x1a>
 8001e04:	602b      	str	r3, [r5, #0]
 8001e06:	bd38      	pop	{r3, r4, r5, pc}
 8001e08:	20000124 	.word	0x20000124

08001e0c <__malloc_lock>:
 8001e0c:	4770      	bx	lr

08001e0e <__malloc_unlock>:
 8001e0e:	4770      	bx	lr

08001e10 <_malloc_usable_size_r>:
 8001e10:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001e14:	2800      	cmp	r0, #0
 8001e16:	f1a0 0004 	sub.w	r0, r0, #4
 8001e1a:	bfbc      	itt	lt
 8001e1c:	580b      	ldrlt	r3, [r1, r0]
 8001e1e:	18c0      	addlt	r0, r0, r3
 8001e20:	4770      	bx	lr
	...

08001e24 <_init>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr

08001e30 <_fini>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	bf00      	nop
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr
